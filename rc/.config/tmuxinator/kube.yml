# ~/.tmuxinator/wordstream.yml

name: kube
root: ~/dev/assertion-context

# Optional tmux socket
# socket_name: foo

# Runs before everything. Use it to start daemons etc.
# pre: sudo /etc/rc.d/mysqld start

# Project hooks
# Runs on project start, always
# on_project_start: command
# Run on project start, the first time
# on_project_first_start: command
# Run on project start, after the first time
# on_project_restart: command
# Run on project exit ( detaching from tmux session )
# on_project_exit: command
# Run on project stop
# on_project_stop: command

# Runs in each window and pane before window/pane specific commands. Useful for setting up interpreter versions.
# pre_window: rbenv shell 2.0.0-p247

# Pass command line options to tmux. Useful for specifying a different tmux.conf.
# tmux_options: -f ~/.tmux.mac.conf

# Change the command to call tmux.  This can be used by derivatives/wrappers like byobu.
# tmux_command: byobu

# Specifies (by name or index) which window will be selected on project startup. If not set, the first window is used.
# startup_window: editor

# Specifies (by index) which pane of the specified window will be selected on project startup. If not set, the first pane is used.
# startup_pane: 1

# Controls whether the tmux session should be attached to automatically. Defaults to true.
# attach: false

# Runs after everything. Use it to attach to tmux with custom options etc.
# post: tmux -CC attach -t wordstream

windows:
  - kube-main:
      root: ~/dev/assertion-context
      layout: tiled
      panes:
        - shell:
          - workon assertion-context
  - default-pods:
      root: ~/dev/assertion-context
      layout: even-vertical
      panes:
          - watch "kubectl get pods -o wide"
  - default-nodes_svcs:
      root: ~/dev/assertion-context
      layout: even-vertical
      panes:
        - nodes:
          - watch "kubectl get nodes"
        - top-nodes:
          - watch "kubectl top nodes"
        - services:
          - watch "kubectl get svc"
  - kube-system:
      root: ~/dev/assertion-context
      layout: even-vertical
      panes:
        - services:
          - watch "kubectl get svc --namespace kube-system"
        - top:
          - watch "kubectl get pod --namespace kube-system -o wide"
  - monitoring:
      root: ~/dev/assertion-context
      layout: even-vertical
      panes:
        - services:
          - watch "kubectl get svc --namespace monitoring"
        - top:
          - watch "kubectl get pod --namespace monitoring -o wide"
  - jaeger-infra:
      root: ~/dev/assertion-context
      layout: even-vertical
      panes:
        - services:
          - watch "kubectl get svc --namespace jaeger-infra"
        - top:
          - watch "kubectl get pod --namespace jaeger-infra -o wide"
  - kube-proxies:
      root: ~/dev/assertion-context
      layout: even-vertical
      panes:
        - dashboard:
            - tmux set synchronize-panes on
            - "echo dashboard: https://localhost:8443/ && kubectl --namespace kube-system port-forward $(kubectl get pods --namespace kube-system -l 'app=kubernetes-dashboard,release=kubernetes-dashboard' -o jsonpath='{.items[0].metadata.name}') 8443:8443"
        - prometheus:
            - "echo prometheus: http://localhost:9090 && kubectl --namespace monitoring port-forward svc/prometheus-k8s 9090"
        - grafana:
            - "echo grafana: http://localhost:3000 && kubectl --namespace monitoring port-forward svc/grafana 3000"
        - alert-manager:
            - "echo alert-manager: http://localhost:9093 && kubectl --namespace monitoring port-forward svc/alertmanager-main 9093"
        - jaeger:
            - "echo jaeger: http://localhost:16686 && kubectl port-forward -n jaeger-infra $(kubectl get pod -n jaeger-infra -l component=query -o jsonpath='{.items[0].metadata.name}') 16686:16686"
  - ipython:
      root: ~/dev/assertion-context
      panes:
        - ipython:
          - workon assertion-context
          - ipython
