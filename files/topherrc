#!/bin/zsh
# shellcheck shell=bash

### COMMAND LINE ALIASES ###
# general aliases
alias g='git'
alias gs='git status'
alias glb="git branch --sort=committerdate | grep -v 'dura-' | tail -n 15"
alias agh='ag --hidden --ignore .git'
# application aliases
export BAT_THEME=zenburn
alias ca=batcat -p
alias dr=lazydocker
alias fd=fdfind
alias fdh='fdfind -H'
alias vim=nvim
alias gg=lazygit
alias lg=lazygit
alias ls="exa"
alias ll="exa -al"
alias rg='rg --smart-case --no-messages'
alias rgh="rg --smart-case  --no-messages --hidden -g '!.git/'"
alias sgp=/home/gitpod/.dotfiles/start-tmux-and-install-slow-packages.sh
alias xsel="xsel --clipboard"
# don't use a pager if less than a screen
export LESS="-F -X $LESS"
# remove extra '$' from commands
alias '$'=''
alias '$ '=''

# Delete the current branch you're on, leaving you on a detached HEAD
function gdcb {
	branch_name=$(git symbolic-ref HEAD --short)
	current_rev=$(git rev-parse HEAD)
	git checkout "$current_rev"
	git branch -D "$branch_name"
}

# Update and resubmit this graphite stack
function gsrs {
	set -x
	gt stack restack &&
		gt stack submit --update-only
	set +x
}

# Update and resubmit all graphite stacks
function gup {
	set -x
	default_branch_name=$(git symbolic-ref refs/remotes/origin/HEAD | sed 's@^refs/remotes/origin/@@')
	current_branch_name=$(git symbolic-ref HEAD --short) &&
		git checkout "$default_branch_name" &&
		gt repo sync --force &&
		git submodule update &&
		gt stack restack &&
		gt stack submit --update-only
	git checkout "$current_branch_name"
	set +x
}

function pcsq {
	set -x
	inv db.upgrade
	set +x
}

function pcs {
	set -x
	inv db.upgrade
	./bin/setup.py
	set +x
}

function ec2_instance_id() {
	aws ec2 describe-instances --output=json --region=us-east-1 |
		jq "first(.Reservations[].Instances[] | select((.Tags[].Value==\"$1\") and (.State.Name==\"running\")) | .InstanceId)" -r
}

function ec2_ip_address() {
	aws ec2 describe-instances --output=json --region=us-east-1 |
		jq ".Reservations[].Instances[] | select(.Tags[].Value==\"$1\") | .PublicDnsName" -r
}
function ec2_ip_address_private() {
	aws ec2 describe-instances --output=json --region=us-east-1 |
		jq ".Reservations[].Instances[] | select(.Tags[].Value==\"$1\") | .PrivateDnsName" -r
}
function rds_ip_address() {
	aws rds describe-db-instances --output=json --region=us-east-1 |
		jq ".DBInstances[] | select(.DBInstanceIdentifier==\"$1\") | .Endpoint.Address" -r
}
### END COMMAND LINE ALIASES ###

### INSTALL AND CONFIGURE APPLICATIONS ###
# load ssh remote shells in vi mode
function sshv() {
	ssh -t "$1" "bash -i -o vi"
}
### END INSTALL AND CONFIGURE APPLICATIONS ###
