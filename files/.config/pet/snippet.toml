[[snippets]]
  description = "open vim file with fzf"
  command = "vim -o `fzf`"
  output = ""

[[snippets]]
  description = "what's my ip"
  command = "curl -s icanhazip.com | tr -d '\\n' | tee >(xsel)"
  output = ""

[[snippets]]
  description = "find from root"
  command = "find / -name \"*FIX_ME*\" 2>/dev/null"
  output = ""

[[snippets]]
  description = "copy last command"
  command = "echo \"\"\"!!\"\"\" | ansi2txt | tee >(xsel -b)"
  output = ""

[[snippets]]
  description = "clear git rerere cache"
  command = "rm -rf .git/rr-cache"
  output = ""

[[snippets]]
  description = "kill all tmux sessions"
  command = "tmux list-sessions | cut -d: -f 1 | xargs -I {} tmux kill-session -t {}"
  output = ""

[[snippets]]
  description = "git filename changes since last commit"
  command = "git --no-pager diff --name-only HEAD^"
  output = ""

[[snippets]]
  description = "tmux kill unattached sessions"
  command = "tmux list-sessions | grep -v attached | cut -d: -f 1 | xargs -I {} tmux kill-session -t {}"
  output = ""

[[snippets]]
  description = "list directories and their sizes, sorted and human readable"
  command = "du -h | sort -h"
  output = ""

[[snippets]]
  description = "format json from the clipboard"
  command = "xsel -o | jq . | xsel"
  output = ""

[[snippets]]
  description = "python dictionary to json"
  command = "xsel | xargs -0 python -c 'import ast, json, sys ; out = ast.literal_eval(sys.argv[1]) ; print json.dumps(out)' | jq . | tee >(xsel)"
  output = ""

[[snippets]]
  description = "list users of port 8000"
  command = "lsof -nP -i4TCP:8000"
  output = ""

[[snippets]]
  description = "kill all running docker containers"
  command = "docker ps -q | xargs docker kill"
  output = ""

[[snippets]]
  description = "hg diff less with color"
  command = "hg d --color on | less"
  output = ""

[[snippets]]
  description = "make this a dotfiles tmux window"
  command = "tmux rename-window dotfiles && tmux move-window -t 10 && cd ~/dev/dotfiles && git status"
  output = ""

[[snippets]]
  description = "connect to new tmux session, creating it if it doesn't exist"
  command = "tmux new-sess -A -s work"
  output = ""

[[snippets]]
  description = "conda update environment packages"
  command = "conda env update --file ~/dev/memfault/environment.yml"
  output = ""

[[snippets]]
  description = "swap keyboard config"
  command = "/usr/local/bin/keyboard"
  output = ""

[[snippets]]
  description = "start session memfault"
  command = "cd ~/dev/memfault && conda activate memfault"
  output = ""

[[snippets]]
  description = "open window for current directory"
  command = "nautilus . &"
  output = ""

[[snippets]]
  description = "rerun last command. upload stdout to gist and copy url to clipboard"
  command = "!! | ansi2txt | gh gist create - | tee >(xsel -b)"
  output = ""

[[snippets]]
  description = "rerun last command. copy output to clipboard"
  command = "!! | ansi2txt | tee >(xsel -b)"
  output = ""

[[snippets]]
  description = "run black on changed modified files"
  command = "black $(git ls-files -m)"
  output = ""

[[snippets]]
  description = "create gist from clipboard"
  command = "xsel -o | ansi2txt | gh gist create - | tee >(xsel)"
  output = ""

[[snippets]]
  description = "delete git branches which are deleted on remote"
  command = "git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | vipe | xargs git branch -D"
  output = ""

[[snippets]]
  description = "resolve kitty ssh error on previous command. 'unknown terminal'"
  command = "kitty +kitten ssh !!"
  output = ""

[[snippets]]
  description = "create pull request"
  command = "git push -u origin HEAD && gh pr create --fill --draft"
  output = ""

[[snippets]]
  description = "redis proxy to app.redsmin.com"
  command = "docker run -it --rm --name redsmin-proxy --network memfault_default -e REDSMIN_KEY=609056fb544e0c0f655afcdd -e REDIS_URI=\"redis://172.18.0.2:6379\" redsmin/proxy"
  output = ""

[[snippets]]
  description = "rdb connect to celery worker debug"
  command = "telnet localhost 6899 || telnet localhost 6900"
  output = ""

[[snippets]]
  description = "run the same 'ag' but looking for hidden files"
  command = "ag workflow_dis --hidden"
  output = ""

[[snippets]]
  description = "aws login root"
  command = "aws-vault login topher-root -d 36h"
  output = ""

[[snippets]]
  description = "aws login prod"
  command = "aws-vault login topher-prod -d 36h"
  output = ""

[[snippets]]
  description = "delete .tmp temp branches from git"
  command = "g b | grep \\\\.tmp | vipe | xargs git branch -D "
  output = ""

[[snippets]]
  description = "start memfault servers in tmux panes"
  command = "tmuxp load work"
  output = ""

[[snippets]]
  description = "update python dependencies"
  command = "invoke poetry.lock poetry.export "
  output = ""

[[snippets]]
  description = "list all flask routes"
  command = "flask routes"
  output = ""

[[snippets]]
  description = "postgres cleanup query from docker logs strip from clipboard"
  command = "xsel -b --output | sed -e 's/.*statement:\\s*//' -e 's/.*db_1\\s*|\\s*//' - | tee >(xsel -b)"
  output = ""

[[snippets]]
  description = "reformat postgres sql query from clipboard"
  command = "xsel -b --output | sqlformat --reindent --indent_columns - | tee >(xsel -b)"
  output = ""

[[snippets]]
  description = "bash print exit code success=0"
  command = "echo $?"
  output = ""

[[snippets]]
  description = "run terraform validate in all subdirectories"
  command = "find . -type d -execdir sh -c \"pwd && terraform init && terraform validate\" \\;"
  output = ""

[[snippets]]
  description = "absorb commits changes TODO: make work with graphite"
  command = "git add . && git absorb --base $(stg id stgit-topher:{base}) ; stg repair && git restore --staged ."
  output = ""

[[snippets]]
  description = "run prowler security groups unused"
  command = "se"
  output = ""

[[snippets]]
  description = "terraform fmt changed files"
  command = "terraform fmt $(git diff --name-only HEAD^)"
  output = ""

[[snippets]]
  description = "run autoflake remove unused imports"
  command = "autoflake --in-place --remove-all-unused-imports example.py"
  output = ""

[[snippets]]
  description = "redis docker pytest container cli"
  command = "redis-cli -p $(docker ps | grep pytest-master_redis_1 | perl -nE 'say/:(\\d+)-/')"
  output = ""

[[snippets]]
  description = "psql into pytest docker container postgres"
  command = "psql \"postgresql://memfault:memfault@127.0.0.1:$($ docker ps | grep master_db | perl -ne '/0.0.0.0:(\\d+)/ && print \"$1\"')/memfault_db?sslmode=disable\""
  output = ""

[[snippets]]
  description = "ssh into seedbox"
  command = "ssh_seedbox"
  output = ""

[[snippets]]
  description = "print ubuntu version"
  command = "lsb_release -a"
  output = ""

[[snippets]]
  description = "print wifi qr code"
  command = "nmcli dev wifi show-password"
  output = ""

[[snippets]]
  description = "socat for telnet debugging"
  command = "rlwrap socat - tcp:127.0.0.1:4444\\n"
  output = ""

[[snippets]]
  description = "open pr in github dashboard chrome"
  command = "gh pr view --web"
  output = ""

[[snippets]]
  description = "get all commits / PRs which are in master but not yet released to prod"
  command = "git log --oneline --no-decorate $(aws-vault exec memfault-prod -- inv sheriff.release-current)..origin/master"
  output = ""

[[snippets]]
  description = "Source rust on PATH"
  command = "source \"$HOME/.cargo/env\""
  output = ""

[[snippets]]
  description = "Update steps to skip in vim"
  command = "aws ssm get-parameter --name /CodeBuild/CODEPIPELINE_STEPS_TO_SKIP --with-decryption --query Parameter.Value --output text --region us-east-1 | vipe | xargs aws ssm put-parameter --name /CodeBuild/CODEPIPELINE_STEPS_TO_SKIP --type SecureString --overwrite --value --region us-east-1"
  output = ""

[[snippets]]
  description = "ssm caprover box ec2"
  command = "aws ssm --profile memfault-prod --region=us-east-1 start-session --target $(ec2_instance_id CapRover)"
  output = ""

[[snippets]]
  description = "copy github PR url to clipboard"
  command = "gh pr view --json url --jq .url | xsel"
  output = ""

[[snippets]]
  description = "check out most recently edited updated git branch"
  command = "git checkout $(git for-each-ref --sort=-committerdate refs/heads/ --format='%(refname:short)' --count=1)"
  output = ""

[[snippets]]
  description = "status of all celery queues rabbitmq env vars"
  command = "aws-vault exec memfault-prod -- inv deploy.env-var-get --vars CELERY_WORKER_S_QUEUE,CELERY_WORKER_L_QUEUE,CELERY_WORKER_BEE_QUEUE"
  output = ""

[[snippets]]
  description = "copy github url of current pr"
  command = "gh pr view --json url --jq .url | tee >(xsel -b)"
  output = ""

[[snippets]]
  description = "Remove newlines from clipboard text"
  command = "xsel -o | sed '/^$/d' | xsel"
  output = ""

[[snippets]]
  description = "copy markdown image snippet PR"
  command = "echo '![image](URL)' | xsel -i"
  output = ""

[[snippets]]
  description = "copy details summary markdown github gh PR template"
  command = "echo '<details><summary>Summary</summary>\\n</details>' | xsel -i"
  output = ""

[[snippets]]
  description = "copy francois with the c"
  command = "echo 'Fran√ßois' | xsel -i"
  output = ""
