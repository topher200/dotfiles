#!/usr/bin/env python

# "force creates" a branch by deleting the existing one and recreating it
#
# Solves the issue of `git checkout -b new-branch` followed by `A branch named 'new-branch' already
# exists!`
#
# Runs on the current branch. Sanity checks to make sure you're not breaking
# obvious things.
#
# Run with: force-create-branch

import subprocess

def main():
    # We need to get the new branchname from the command line input. we're not currently on the
    # branch we want to process - that's the whole point
    raise NotImplementedError("not working")
    # get current git branch name
    branch_name = subprocess.check_output(
        "git rev-parse --symbolic-full-name --abbrev-ref HEAD", shell=True)
    branch_name = branch_name.strip()

    # sanity check git branch
    if "stable" in branch_name:
        print "can't operate on stable branch {}".format(branch_name)
        return
    if "HEAD" in branch_name:
        print "can't operate on HEAD (got branch {})".format(branch_name)
        return

    # delete git branch
    try:
        print subprocess.check_output("git branch -D {}".format(branch_name), shell=True)
    except subprocess.CalledProcessError:
        print "Failed to delete branch - doesn't exist or you're on top of it"

    # create new branch
    print subprocess.check_output("git checkout -b {}".format(branch_name), shell=True)


if __name__ == "__main__":
    main()
